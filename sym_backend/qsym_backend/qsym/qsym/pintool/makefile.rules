##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := libqsym

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := 


# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

THIRD_PARTIES := $(wildcard third_party/*/)
GENCODE := $(patsubst codegen/gen_%.py, %__gen.cpp, $(wildcard codegen/*.py))
OBJDIRS := $(addprefix $(OBJDIR), $(THIRD_PARTIES))
SRCS := $(sort $(wildcard *.cpp $(addsuffix *.cpp, $(THIRD_PARTIES))) $(GENCODE))
OBJS := $(patsubst %.cpp, $(OBJDIR)%$(OBJ_SUFFIX), $(SRCS))

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)

# Hack for 16.04
ifeq ($(shell lsb_release -sr), 16.04)
  TOOL_CXXFLAGS += -fabi-version=2 -D_GLIBCXX_USE_CXX11_ABI=0
endif

TOOL_CXXFLAGS += -I$(CURDIR)
TOOL_CXXFLAGS += -g -Wno-error=unused-function -std=c++11 -DCONFIG_CONTEXT_SENSITIVE
TOOL_LIBS += -lz3

##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.
$(OBJDIR)$(TEST_TOOL_ROOTS)$(PINTOOL_SUFFIX): third_party $(OBJS)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $(OBJS) $(TOOL_LPATHS) $(TOOL_LIBS)

%__gen.cpp: codegen/gen_%.py codegen/%.cpp
	@$<

third_party:
	@for dir in $(OBJDIRS); do \
		mkdir -p $$dir; \
	done

.PHONY: third_party codegen
